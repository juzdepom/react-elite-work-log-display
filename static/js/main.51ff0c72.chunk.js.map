{"version":3,"sources":["App.js","airtableIds.js","methods.js","index.js"],"names":["base","Airtable","apiKey","App","useState","entries","setEntries","useEffect","select","view","eachPage","records","fetchNextPage","totalTimeWorked","length","minutes","forEach","entry","fields","remainderMinutes","calculateTotalMinutesWorked","style","textAlign","fontFamily","map","index","date","tag","description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAMMA,EAAO,IAAIC,IAAS,CAAEC,OCLN,sBDKwBF,KCNxB,qBDmDPG,MA3Cf,WAEE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAGAC,qBAAU,WAETP,EAAK,WACFQ,OAAO,CAAEC,KAAM,cACfC,UAAS,SAACC,EAASC,GAClBN,EAAWK,GAEXC,SAEF,IAEH,IAAIC,EExBC,SAAqCR,GAExC,GAAGA,EAAQS,OAAS,EAAE,CACpB,IAAIC,EAAU,EACdV,EAAQW,SAAQ,SAACC,GACfF,GAAWE,EAAMC,OAAOH,WAG1B,IACII,EAAmBJ,EAAU,GAEjC,MADU,UAFEA,EAAU,GAEZ,kBAAqBI,EAArB,SFcQC,CAA4Bf,GAGlD,OACE,sBAAKgB,MAAO,CAACC,UAAW,SAAUC,WAAY,wBAA9C,UACE,sDACA,oDAAuBV,EACvB,0BAGA,6CAEAR,EAAQmB,KAAI,SAACP,EAAOQ,GAAR,OACV,gCACE,gDAASR,EAAMC,OAAOQ,KAAtB,OACA,gDAAST,EAAMC,OAAOH,QAAtB,kBACA,+BAAM,kCAAKE,EAAMC,OAAOS,SACxB,uBACA,+BAAM,4BAAIV,EAAMC,OAAOU,gBACvB,uBACA,yBAPQH,UGjClBI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.51ff0c72.chunk.js","sourcesContent":["import { apiKey, baseId } from \"./airtableIds\";\nimport { calculateTotalMinutesWorked } from \"./methods\"\nimport React, { useEffect, useState } from \"react\";\nimport Airtable from \"airtable\";\n\n//AIRTABLE\nconst base = new Airtable({ apiKey: apiKey }).base(baseId);\n\nfunction App() {\n\n  const [entries, setEntries] = useState([]);\n\n  //this method pulls in the data\n  useEffect(() => {\n   //pull in the 'goals' table view data\n   base(\"entries\")\n     .select({ view: \"Grid view\" })\n     .eachPage((records, fetchNextPage) => { \n       setEntries(records);\n       // console.log(records)\n       fetchNextPage();\n     });\n  }, []);\n\n  let totalTimeWorked = calculateTotalMinutesWorked(entries) // will return a string\n\n\n  return (\n    <div style={{textAlign: \"center\", fontFamily: \"'Roboto', sans-serif\"}}>\n      <h1>ELITEWEB.Co Work Log</h1>\n      <p>Total time worked: {totalTimeWorked}  \n      <br/>\n      </p>\n      \n      <h3>All Entries</h3>\n      {\n      entries.map((entry, index) => (\n        <div key={index}>\n          <span>🗓{entry.fields.date} </span>\n          <span>🕐{entry.fields.minutes} min – </span>\n          <span><i>#{entry.fields.tag}</i></span>\n          <br/>\n          <span><i>{entry.fields.description}</i></span>\n          <br/>\n          <br/>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","export const baseId = \"appK6UP7c61WkknOL\"\nexport const apiKey = \"key9YOWPfufxQsX9x\"","export function calculateTotalMinutesWorked(entries){ // will return a string\n    //note: entries will be an object\n    if(entries.length > 0){ //note: this method isn't async so it's called when entries object is still empty; this if statement takes care of that\n      let minutes = 0\n      entries.forEach((entry) => { \n        minutes += entry.fields.minutes\n      })\n      //convert minutes to hours and minutes\n      let hours = minutes / 60 \n      let remainderMinutes = minutes % 60\n      let string = `${hours} hours ${remainderMinutes} min`\n      return string\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}